// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Player {
  id           Int                  @id @default(autoincrement())
  publicId     String               @unique @db.Char(36)
  pseudo       String               @unique @db.VarChar(34)
  slug         String               @unique @db.VarChar(34)
  password     String?              @db.Char(60)
  isGuest      Boolean              @default(false)
  isBot        Boolean              @default(false)
  createdAt    DateTime             @default(now())
  settings     PlayerSettings?
  gamesAsHost  HostedGame[]         @relation("GamesAsHost")
  games        HostedGameToPlayer[]
  chatMessages ChatMessage[]
}

model PlayerSettings {
  player                    Player  @relation(fields: [playerId], references: [id])
  playerId                  Int     @unique
  confirmMoveBlitz          Boolean @default(false)
  confirmMoveNormal         Boolean @default(false)
  confirmMoveCorrespondance Boolean @default(true)
  orientationLandscape      Int     @default(11) @db.TinyInt()
  orientationPortrait       Int     @default(9) @db.TinyInt()
  showCoords                Boolean @default(false)
}

model HostedGame {
  id           Int                  @id @default(autoincrement())
  publicId     String               @unique @db.Char(36)
  state        String               @db.VarChar(15)
  host         Player               @relation("GamesAsHost", fields: [hostId], references: [id])
  hostId       Int
  players      HostedGameToPlayer[]
  options      HostedGameOptions?
  game         Game?
  timeControl  Json
  createdAt    DateTime
  chatMessages ChatMessage[]

  @@index([state, createdAt])
}

model HostedGameToPlayer {
  hostedGame   HostedGame @relation(fields: [hostedGameId], references: [id])
  hostedGameId Int
  player       Player     @relation(fields: [playerId], references: [id])
  playerId     Int
  order        Int        @db.TinyInt()

  @@id([hostedGameId, order])
}

model Game {
  hostedGame         HostedGame @relation(fields: [hostedGameId], references: [id])
  hostedGameId       Int        @unique
  size               Int        @db.TinyInt()
  allowSwap          Boolean
  currentPlayerIndex Int        @db.TinyInt()
  movesHistory       Json
  winner             Int?       @db.TinyInt()
  outcome            String?    @db.VarChar(15)
  startedAt          DateTime
  lastMoveAt         DateTime?
  endedAt            DateTime?

  @@index([endedAt])
}

model HostedGameOptions {
  hostedGame         HostedGame @relation(fields: [hostedGameId], references: [id])
  hostedGameId       Int        @unique
  boardsize          Int        @db.TinyInt()
  firstPlayer        Int?       @db.TinyInt()
  swapRule           Boolean
  opponentType       String     @db.VarChar(15)
  timeControlType    String     @db.VarChar(15)
  timeControlOptions Json
}

model ChatMessage {
  id           Int        @id @default(autoincrement())
  hostedGame   HostedGame @relation(fields: [hostedGameId], references: [id])
  hostedGameId Int
  player       Player?    @relation(fields: [playerId], references: [id])
  playerId     Int?
  content      String     @db.VarChar(255)
  createdAt    DateTime   @default(now())

  @@index([hostedGameId, createdAt])
}
